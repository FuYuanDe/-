1. 互斥锁和条件变量的使用
消息队列


struct msg{
	struct msg *next;
	int msg_type;	//消息类型
};

静态锁的初始化 PTHREAD_MUTEX_INITIALIZER

pthread_mutex_t //锁的类型

    int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr); // 用于动态的初始化

    int pthread_mutex_destroy(pthread_mutex_t *mutex); // 把mutex锁干掉，并且释放所有它所占有的资源

    int pthread_mutex_lock(pthread_mutex_t *mutex); // 请求锁，如果当前mutex已经被锁，那么这个线程就会卡在这儿，直到mutex被释放

    int pthread_mutex_unlock(pthread_mutex_t *mutex); // 解锁
    
条件变量
 PTHREAD_COND_INITIALIZER // 初始化宏
 pthread_cond_t 类型
 int pthread_cond_init(pthread_cond_t *restrict cond, const pthread_condattr_t *restrict attr);
 int pthread_cond_destroy(pthread_cond_t *cond);
 int pthread_cond_signal(pthread_cond_t *cond);	//通知条件变量满足
 int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex);//条件等待
 
 使用例子
 消费者：
 pthread_mutex_lock(pthread_mutex_t *mutex)
 while (condition_is_false) {
 		pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex);
 		//do something
 		pthread_mutex_unlock(pthread_mutex_t *mutex);
 }
 
 生产者：
 
 	 pthread_mutex_lock(pthread_mutex_t *mutex)
   pthread_cond_signal(pthread_cond_t *cond);

 		//do something
 		pthread_mutex_unlock(pthread_mutex_t *mutex);
 		
2. 线程创建
int pthread_create(pthread_t *thread, const pthread_attr_t *attr,void *(*start_routine) (void *), void *arg);
int pthread_join(pthread_t thread, void **value_ptr)